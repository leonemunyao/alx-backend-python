#!/bin/bash

echo "Starting Rolling Update Script"
echo "================================="

# Colors for output
BLUE='\033[0;34m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Configuration
APP_URL="http://localhost:8000"
REQUEST_INTERVAL=2
UPDATE_TIMEOUT=600

# Function to continuously test the application
continuous_testing() {
    local test_duration=$1
    local log_file="rolling_update_test.log"
    local start_time=$(date +%s)
    local end_time=$((start_time + test_duration))
    local success_count=0
    local error_count=0
    local total_requests=0
    
    echo "Starting continuous testing for ${test_duration} seconds..."
    echo "Logging results to: $log_file"
    
    # Clear previous log
    > $log_file
    
    while [ $(date +%s) -lt $end_time ]; do
        local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
        local response_code=$(curl -s -o /dev/null -w "%{http_code}" "$APP_URL" 2>/dev/null || echo "000")
        local response_time=$(curl -s -o /dev/null -w "%{time_total}" "$APP_URL" 2>/dev/null || echo "0")
        
        total_requests=$((total_requests + 1))
        
        if [ "$response_code" = "200" ]; then
            success_count=$((success_count + 1))
            echo "[$timestamp] SUCCESS: HTTP $response_code (${response_time}s)" >> $log_file
            printf "."
        else
            error_count=$((error_count + 1))
            echo "[$timestamp] ERROR: HTTP $response_code (${response_time}s)" >> $log_file
            printf "${RED}x${NC}"
        fi
        
        sleep $REQUEST_INTERVAL
    done
    
    echo ""
    echo "ðŸ“Š Testing Results:"
    echo "   Total Requests: $total_requests"
    echo "   Successful: $success_count"
    echo "   Errors: $error_count"
    echo "   Success Rate: $(( success_count * 100 / total_requests ))%"
    
    if [ $error_count -eq 0 ]; then
        echo "No downtime detected during rolling update!"
    else
        echo "$error_count errors detected during rolling update"
    fi
}

# Function to monitor rollout status
monitor_rollout() {
    local deployment_name=$1
    
    echo "Monitoring rollout status for $deployment_name..."
    
    # Start monitoring in background
    {
        while true; do
            local status=$(kubectl rollout status deployment/$deployment_name --timeout=10s 2>/dev/null)
            if echo "$status" | grep -q "successfully rolled out"; then
                echo "Rollout completed successfully!"
                break
            elif echo "$status" | grep -q "waiting"; then
                echo "Rollout in progress..."
            else
                echo "Rollout status: $status"
            fi
            sleep 5
        done
    } &
    
    MONITOR_PID=$!
}

# Step 1: Build new Docker image version 2.0
echo ""
echo "${BLUE}Step 1: Building Docker image version 2.0...${NC}"

# Set minikube docker environment
eval $(minikube docker-env)

# Create a version 2.0 of the image (simulate changes)
echo "Building messaging-app:2.0..."

# Create a temporary Dockerfile with version info
cat << EOF > Dockerfile.v2
FROM python:3.10

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1
ENV APP_VERSION=2.0

# Set the working directory in the container
WORKDIR /app

# Install system dependencies for MySQL
RUN apt-get update \\
    && apt-get install -y --no-install-recommends \\
        default-libmysqlclient-dev \\
        gcc \\
        pkg-config \\
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
COPY requirements.txt /app/
RUN pip install --no-cache-dir -r requirements.txt

# Copy the Django application code into the container
COPY . /app/

# Add version info to a file
RUN echo "Version 2.0 - Rolling Update" > /app/version.txt

# Expose port 8000 for the Django application
EXPOSE 8000

# Run the Django development server
CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]
EOF

docker build -f Dockerfile.v2 -t messaging-app:2.0 .
rm Dockerfile.v2

echo "Docker image version 2.0 built successfully"

# Step 2: Ensure service is accessible for testing
echo ""
echo "${YELLOW}Step 2: Setting up service access for testing...${NC}"

# Kill any existing port-forward processes
pkill -f "kubectl port-forward" 2>/dev/null

# Start port forwarding in background
kubectl port-forward service/messaging-app-service 8000:8000 &
PORT_FORWARD_PID=$!

# Wait for port forwarding to be ready
echo "Waiting for port forwarding to be ready..."
sleep 5

# Test initial connectivity
response=$(curl -s -o /dev/null -w "%{http_code}" "$APP_URL" 2>/dev/null || echo "000")
if [ "$response" = "200" ]; then
    echo "Service is accessible at $APP_URL"
else
    echo "Service might not be ready yet (HTTP $response)"
fi

# Step 3: Get current deployment status
echo ""
echo "${BLUE}Step 3: Current deployment status...${NC}"

echo "Current pods:"
kubectl get pods -l app=messaging-app

echo ""
echo "Current deployment:"
kubectl get deployment messaging-app-blue

# Step 4: Start continuous testing
echo ""
echo "${YELLOW}Step 4: Starting continuous testing...${NC}"

# Start continuous testing in background
continuous_testing 120 &  # Test for 2 minutes
TESTING_PID=$!

# Step 5: Apply the rolling update
sleep 5  # Give testing a moment to start

echo ""
echo "${GREEN}Step 5: Applying rolling update...${NC}"

# Record the time when update starts
UPDATE_START_TIME=$(date '+%Y-%m-%d %H:%M:%S')
echo "Rolling update started at: $UPDATE_START_TIME"

# Apply the updated deployment
kubectl apply -f blue_deployment.yaml

if [ $? -eq 0 ]; then
    echo "Deployment update applied successfully"
else
    echo "Failed to apply deployment update"
    exit 1
fi

# Step 6: Monitor the rollout progress
echo ""
echo "${BLUE}Step 6: Monitoring rollout progress...${NC}"

# Start rollout monitoring
monitor_rollout "messaging-app-blue"

# Use kubectl rollout status to wait for completion
echo "Waiting for rollout to complete..."
kubectl rollout status deployment/messaging-app-blue --timeout=${UPDATE_TIMEOUT}s

if [ $? -eq 0 ]; then
    echo "Rolling update completed successfully!"
else
    echo "Rolling update failed or timed out"
    
    # Show rollout history for debugging
    echo "Rollout history:"
    kubectl rollout history deployment/messaging-app-blue
    
    exit 1
fi

# Kill the monitoring process
kill $MONITOR_PID 2>/dev/null

# Step 7: Verify the rolling update is complete
echo ""
echo "${GREEN}Step 7: Verifying rolling update completion...${NC}"

echo "Current pods after update:"
kubectl get pods -l app=messaging-app -o wide

echo ""
echo "Deployment status:"
kubectl describe deployment messaging-app-blue | grep -A 5 "Conditions:"

echo ""
echo "Pod details:"
kubectl get pods -l app=messaging-app --show-labels

# Check if all pods are running the new version
echo ""
echo "Verifying new image version:"
kubectl get pods -l app=messaging-app -o jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.spec.containers[0].image}{"\n"}{end}'

# Step 8: Wait for testing to complete
echo ""
echo "${YELLOW}Step 8: Waiting for continuous testing to complete...${NC}"

# Wait for testing process to finish
wait $TESTING_PID

# Step 9: Final verification
echo ""
echo "${GREEN}Step 9: Final verification...${NC}"

# Test the updated application
echo "Testing updated application:"
response=$(curl -s "$APP_URL" 2>/dev/null | head -c 100)
echo "App response: $response"

# Check version if endpoint exists
version_response=$(curl -s "$APP_URL/version" 2>/dev/null || echo "Version endpoint not available")
echo "Version response: $version_response"

# Step 10: Cleanup
echo ""
echo "Cleaning up..."
kill $PORT_FORWARD_PID 2>/dev/null

# Show rollout history
echo ""
echo "Rollout History:"
kubectl rollout history deployment/messaging-app-blue

echo ""
echo "Rolling Update Script Completed!"
echo "=================================="
echo "Update started at: $UPDATE_START_TIME"
echo "Update completed at: $(date '+%Y-%m-%d %H:%M:%S')"

echo ""
echo "Useful commands for further verification:"
echo "- Check pod logs: kubectl logs -l app=messaging-app"
echo "- Rollback if needed: kubectl rollout undo deployment/messaging-app-blue"
echo "- Check rollout status: kubectl rollout status deployment/messaging-app-blue"
echo "- View test log: cat rolling_update_test.log"
