pipeline {
    agent any
    
    environment {
        PYTHON_VERSION = '3'
        VIRTUAL_ENV = 'venv'
        DOCKER_HUB_REPO = 'leonemunyao/messaging-app'
        IMAGE_TAG = "${BUILD_NUMBER}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out code from GitHub...'
                git branch: 'main', 
                    credentialsId: 'github-credentials', 
                    url: 'https://github.com/leonemunyao/alx-backend-python.git'
            }
        }
        
        stage('Setup Environment') {
            steps {
                echo 'Setting up Python virtual environment...'
                sh '''
                    cd messaging_app
                    python3 -m venv ${VIRTUAL_ENV}
                    . ${VIRTUAL_ENV}/bin/activate

                    pip3 install --upgrade pip
                    pip3 cache purge

                    pip3 install --no-cache-dir -r requirements.txt
                    pip3 install flake8
                    pip3 install --no-cache-dir pytest pytest-html pytest-cov pytest-django

                    echo "Environment setup completed successfully"
                '''
            }
        }
        
        stage('Lint Code') {
            steps {
                echo 'Running code quality checks...'
                sh '''
                    cd messaging_app
                    . ${VIRTUAL_ENV}/bin/activate
                    python3 -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
                    python3 -m flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics || true
                '''
            }
        }
        
        stage('Run Tests') {
            steps {
                echo 'Running Django tests with pytest...'
                withCredentials([
                string(credentialsId: 'django-secret-key', variable: 'SECRET_KEY'),
                string(credentialsId: 'db-name', variable: 'DB_NAME'),
                string(credentialsId: 'db-user', variable: 'DB_USER'),
                string(credentialsId: 'db-password', variable: 'DB_PASSWORD'),
                string(credentialsId: 'db-host', variable: 'DB_HOST'),
                string(credentialsId: 'db-port', variable: 'DB_PORT'),
                string(credentialsId: 'db-root-password', variable: 'DB_ROOT_PASSWORD')
            ]) {
                sh '''
                    cd messaging_app
                    . ${VIRTUAL_ENV}/bin/activate
                    
                    export DJANGO_SETTINGS_MODULE=messaging_app.settings
                    export SECRET_KEY="${SECRET_KEY}"
                    export DB_NAME="${DB_NAME}"
                    export DB_USER="${DB_USER}"
                    export DB_PASSWORD="${DB_PASSWORD}"
                    export DB_HOST="${DB_HOST}"
                    export DB_PORT="${DB_PORT}"
                    export DB_ROOT_PASSWORD="${DB_ROOT_PASSWORD}"
                    export DEBUG="True"

                    # Run Django system checks
                    python3 manage.py check
                    
                    # Run tests with coverage and HTML report
                    pytest --html=test-report.html --self-contained-html --cov=. --cov-report=html --cov-report=xml --junit-xml=test-results.xml || true
                '''
                }
            }
        }
        
        stage('Generate Reports') {
            steps {
                echo 'Generating test reports...'

                junit testResults: 'messaging_app/test-results.xml'
                
                publishHTML([
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: 'messaging_app',
                    reportFiles: 'test-report.html',
                    reportName: 'Test Report',
                    reportTitles: 'Django Messaging App Test Report'
                ])
                
                publishHTML([
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: 'messaging_app/htmlcov',
                    reportFiles: 'index.html',
                    reportName: 'Coverage Report',
                    reportTitles: 'Code Coverage Report'
                ])
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                sh '''
                    cd messaging_app
                    docker build -t ${DOCKER_HUB_REPO}:${BUILD_NUMBER} .
                    docker tag ${DOCKER_HUB_REPO}:${BUILD_NUMBER} messaging-app:latest

                    echo "Docker images created:"
                    docker images | grep messaging-app
                '''
            }
        }

        stage('Push Docker Image to Hub') {
            steps {
                echo 'Pushing Docker image to Docker Hub...'
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', 
                                                    usernameVariable: 'DOCKER_HUB_USER', 
                                                    passwordVariable: 'DOCKER_HUB_PASS')]) {
                        sh '''
                            echo "Logging into Docker Hub as ${DOCKER_HUB_USER}..."
                            echo "${DOCKER_HUB_PASS}" | docker login -u "${DOCKER_HUB_USER}" --password-stdin
                            
                            echo "Pushing image: ${DOCKER_HUB_REPO}:${IMAGE_TAG}"
                            docker push ${DOCKER_HUB_REPO}:${IMAGE_TAG}
                            
                            echo "Pushing image: ${DOCKER_HUB_REPO}:latest"
                            docker push ${DOCKER_HUB_REPO}:latest
                            
                            echo "Successfully pushed Docker images to Docker Hub!"
                        '''
                    }
                }
            }
        }
        
        stage('Cleanup Docker Images') {
            steps {
                echo 'Cleaning up local Docker images to save space...'
                sh '''
                    echo "Removing local images to save disk space..."
                    docker rmi ${DOCKER_HUB_REPO}:${IMAGE_TAG} || true
                    docker rmi ${DOCKER_HUB_REPO}:latest || true
                    
                    echo "Current Docker images:"
                    docker images
                '''
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline execution completed'
            
            sh '''
                cd messaging_app
                rm -rf ${VIRTUAL_ENV}
            '''
            
            archiveArtifacts artifacts: 'messaging_app/test-report.html, messaging_app/test-results.xml', 
                           allowEmptyArchive: true
        }
        
        success {
            echo 'Pipeline executed successfully!'
            echo "Docker image pushed to: ${DOCKER_HUB_REPO}:${IMAGE_TAG}"
            echo "Docker image also available as: ${DOCKER_HUB_REPO}:latest"
        }
        
        failure {
            echo 'Pipeline failed!'

            sh '''
                docker rmi ${DOCKER_HUB_REPO}:${IMAGE_TAG} || true
                docker rmi ${DOCKER_HUB_REPO}:latest || true
                docker logout || true
            '''
        }
        
        unstable {
            echo 'Pipeline completed with warnings'
        }
    }
}
